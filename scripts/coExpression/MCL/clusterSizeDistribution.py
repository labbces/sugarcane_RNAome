import numpy as np
import matplotlib.pyplot as plt

# Input: clusters granularity -> generated by clxdo

def cumulative_fraction_of_genes(data):
    # cumulative distribution fraction: 
    # https://www.geeksforgeeks.org/how-to-calculate-and-plot-a-cumulative-distribution-function-with-matplotlib-in-python/
    cdf = np.cumsum(data) / np.sum(data)
    return cdf

def plot_cdf(cluster_sizes, cdf, label, marker, color):
    plt.step(cluster_sizes, cdf, where='post', linestyle='-', linewidth=1, color=color)
    
    # unique indices to plot markers
    unique_indices = np.unique(cluster_sizes, return_index=True)[1]  
    unique_cluster_sizes = cluster_sizes[unique_indices]
    unique_cdf = cdf[unique_indices]
    plt.plot(unique_cluster_sizes, unique_cdf, label=label, marker=marker, linestyle='None', markersize=5, color=color, markerfacecolor='none')
                
inflation_values = [0, 1.4, 2.0, 6.0]
markers = ['o','^', '+', 'x']
colors = ['black', 'darkgrey', 'lightgrey', 'gainsboro']

plt.figure(figsize=(10, 6))

for inflation, marker, color in zip(inflation_values, markers, colors):
    file_name = f'../results/clusterSizeDistribution_I{inflation}.txt'
    data = np.loadtxt(file_name)
    cdf = cumulative_fraction_of_genes(data)
    plot_cdf(data, cdf, label=f'Inflation {inflation}', marker=marker, color=color)
   
# change legend
handles, labels = plt.gca().get_legend_handles_labels()
inflation_0_index = labels.index('Inflation 0')
labels[inflation_0_index] = 'connected components'
plt.legend(handles, labels, frameon=False)
plt.xscale('log')

plt.xticks([1, 2, 3, 10, 100, 1000], ['1','2', '3', '10', '100', '1000'])

# draw lines to cluster size 2 and 3
xticks = [2, 3]
for xtick in xticks:
    plt.plot([xtick, xtick], [0, 0.07], color='red', linestyle='dashed')   # 0.07 = CDF point for cluster size
  
plt.ylim(bottom=0) # force Y axis  start on 0

plt.xlabel('Cluster size')
plt.ylabel('Cumulative fraction of genes')
plt.title('Cluster size distributions of the $\it{E. coli}$ gene expression network')
plt.grid(False)
#plt.savefig('clusterSizeDistribution.png')

plt.show()